{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jacob\\\\Desktop\\\\Application Code\\\\client\\\\src\\\\components\\\\SearchPage2.js\";\nimport React from 'react';\nimport { Jumbotron, Form, Row, Col, Button } from 'react-bootstrap';\nimport { Container } from 'reactstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class SearchPage2 extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onSubmit = e => {\n      console.log(this.state.zip);\n      console.log(this.state.distance);\n\n      if (this.state.zipcodes.indexOf(parseInt(this.state.zip)) !== -1) {\n        let query_zip = \"http://localhost:8081/lat_long/\" + this.state.zip;\n        fetch(query_zip, {\n          method: \"GET\"\n        }).then(res => {\n          return res.json();\n        }, err => {\n          console.log(err);\n        }).then(zip => {\n          this.setState({\n            lat: zip[0].lat,\n            long: zip[0].long\n          }, () => {\n            console.log(this.state.lat);\n            console.log(this.state.long);\n            let dissimilar_query = \"http://localhost:8081/dissimilar_parks/\" + this.state.lat + \"/\" + this.state.long + \"/\" + this.state.distance;\n            let query = dissimilar_query.replace(/-/g, '%2D');\n            fetch(query, {\n              method: \"GET\"\n            }).then(res => {\n              return res.json();\n            }, err => {\n              console.log(err);\n            }).then(parks => {\n              let dissim_parks = parks.map((park, i) => {\n                if (i % 2 === 1) {\n                  return /*#__PURE__*/_jsxDEV(Row, {\n                    children: /*#__PURE__*/_jsxDEV(Container, {\n                      className: \"container p-3 my-3 bg-primary text-white\",\n                      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                        children: [park.park_1, \" and \", park.park_2]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 58,\n                        columnNumber: 41\n                      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                        children: [park.park_1, \" is \", park.park_1_dist.toFixed(1), \" miles from you and \", park.park_2, \" is \", park.park_2_dist.toFixed(1), \" miles from you. \", park.park_1, \" has \", park.park_1_spec, \" species and \", park.park_2, \" has \", park.park_2_spec, \" species. They only have \", park.count_similar, \" species in common giving them a dissimilarity rating of \", park.sim_metric, \".\"]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 61,\n                        columnNumber: 41\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 57,\n                      columnNumber: 37\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 56,\n                    columnNumber: 33\n                  }, this);\n                }\n              });\n              this.setState({\n                parks: dissim_parks\n              });\n            });\n          });\n        });\n      } else {\n        alert(\"zip code does not exists in our database \");\n      }\n\n      e.preventDefault();\n    };\n\n    this.state = {\n      zip: \"\",\n      distance: \"\",\n      zipcodes: [],\n      lat: 0,\n      long: 0,\n      parks: []\n    };\n  }\n\n  componentDidMount() {\n    let zip_query = \"http://localhost:8081/zipcodes\";\n    fetch(zip_query, {\n      method: \"GET\"\n    }).then(res => {\n      return res.json();\n    }, err => {\n      console.log(err);\n    }).then(zipList => {\n      let allZips = zipList.map((zip, i) => zip.zipcode);\n      this.setState({\n        zipcodes: allZips\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Jumbotron, {\n        className: \"jumbotron-wildlife-search\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"jumbotron-wildlife-search-text-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            style: {\n              color: 'white'\n            },\n            children: \"Search for Wildlife\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              color: 'white'\n            },\n            children: \"Want to find two parks within a certain distance from you with different wildlife?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              color: 'white'\n            },\n            children: \"Enter your zipcode and how many miles you're willing to travel. We'll output the five pairs of parks with the most contrasting wild life. If nothing comes up, try to increase your distance.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: this.handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(Row, {\n            children: [/*#__PURE__*/_jsxDEV(Col, {\n              children: /*#__PURE__*/_jsxDEV(Form.Group, {\n                children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                  children: \"Distance from zipcode\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 123,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                  value: this.state.distance,\n                  onChange: e => this.setState({\n                    distance: e.target.value\n                  }),\n                  placeholder: \"distance in miles\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 124,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              children: /*#__PURE__*/_jsxDEV(Form.Group, {\n                children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                  children: \"Zipcode (excluding leading zeros)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 129,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                  value: this.state.zip,\n                  onChange: e => this.setState({\n                    zip: e.target.value\n                  }),\n                  placeholder: \"zipcode\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 130,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 128,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              style: {\n                backgroundColor: \"green\"\n              },\n              type: \"submit\",\n              onClick: this.onSubmit,\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: this.state.parks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Jacob/Desktop/Application Code/client/src/components/SearchPage2.js"],"names":["React","Jumbotron","Form","Row","Col","Button","Container","SearchPage2","Component","constructor","props","onSubmit","e","console","log","state","zip","distance","zipcodes","indexOf","parseInt","query_zip","fetch","method","then","res","json","err","setState","lat","long","dissimilar_query","query","replace","parks","dissim_parks","map","park","i","park_1","park_2","park_1_dist","toFixed","park_2_dist","park_1_spec","park_2_spec","count_similar","sim_metric","alert","preventDefault","componentDidMount","zip_query","zipList","allZips","zipcode","render","color","handleSubmit","target","value","backgroundColor"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Jumbotron, Form , Row, Col, Button} from 'react-bootstrap';\r\nimport { Container } from 'reactstrap';\r\n\r\n\r\nexport default class SearchPage2 extends React.Component{\r\n\r\n    constructor(props) {\r\n\t\tsuper(props);\r\n\r\n        this.state=({\r\n            zip : \"\",\r\n            distance : \"\",\r\n            zipcodes : [],\r\n            lat : 0,\r\n            long : 0,\r\n            parks : []\r\n        })\r\n\r\n\t}\r\n\r\n    onSubmit = (e) => {\r\n        console.log(this.state.zip);\r\n        console.log(this.state.distance);\r\n\r\n        if(this.state.zipcodes.indexOf(parseInt(this.state.zip)) !== -1){\r\n            let query_zip = \"http://localhost:8081/lat_long/\" + this.state.zip;\r\n\r\n            fetch(query_zip, {\r\n                method: \"GET\"\r\n            }).then(res => {\r\n                return res.json();\r\n            }, err => {\r\n                console.log(err);\r\n            }).then(zip => {\r\n                this.setState({\r\n                    lat : zip[0].lat,\r\n                    long : zip[0].long\r\n                }, () => {\r\n                    console.log(this.state.lat);\r\n                    console.log(this.state.long);\r\n                    let dissimilar_query = \"http://localhost:8081/dissimilar_parks/\" + this.state.lat + \"/\" + this.state.long + \"/\" + this.state.distance;\r\n\r\n                    let query = dissimilar_query.replace(/-/g, '%2D');\r\n\r\n                    fetch(query, {\r\n                        method: \"GET\"\r\n                    }).then(res => {\r\n                        return res.json();\r\n                    }, err => {\r\n                        console.log(err);\r\n                    }).then(parks => { \r\n                        let dissim_parks = parks.map((park, i) => {\r\n                            if(i % 2 === 1){\r\n                                return (\r\n                                <Row>\r\n                                    <Container className=\"container p-3 my-3 bg-primary text-white\">\r\n                                        <h4>\r\n                                         {park.park_1} and {park.park_2}\r\n                                        </h4>\r\n                                        <p>\r\n                                        {park.park_1} is {park.park_1_dist.toFixed(1)} miles from you and {park.park_2} is {park.park_2_dist.toFixed(1)} miles from you. {park.park_1} has {park.park_1_spec} species and {park.park_2} has {park.park_2_spec} species. They only have {park.count_similar} species in common giving them a dissimilarity rating of {park.sim_metric}.\r\n                                        </p>\r\n                                    </Container>\r\n                                </Row>)\r\n                            }\r\n                        });\r\n                        this.setState({\r\n                            parks : dissim_parks\r\n                        });\r\n                    });\r\n                });\r\n            });\r\n        } else {\r\n            alert(\"zip code does not exists in our database \")\r\n        }\r\n        \r\n        e.preventDefault();\r\n    }\r\n\r\n\r\n\r\n    componentDidMount(){\r\n\r\n        let zip_query = \"http://localhost:8081/zipcodes\";\r\n\r\n        fetch(zip_query, {\r\n\t\t\tmethod: \"GET\"\r\n\t\t}).then(res => {\r\n\t\t\treturn res.json();\r\n\t\t}, err => {\r\n\t\t\tconsole.log(err);\r\n\t\t}).then(zipList => { \r\n            let allZips = zipList.map((zip, i) =>\r\n                zip.zipcode\r\n            );\r\n            this.setState({\r\n                zipcodes : allZips\r\n            });\r\n\t\t});\r\n    }\r\n\r\n\r\n    render() {\r\n        \r\n        return(\r\n            <div className = \"container\">\r\n                <Jumbotron className=\"jumbotron-wildlife-search\">\r\n                        <div className = \"jumbotron-wildlife-search-text-container\">\r\n                            <h1 style={{color : 'white'}}>Search for Wildlife</h1>\r\n                            <p style={{color : 'white'}}>Want to find two parks within a certain distance from you with different wildlife?</p>\r\n                            <p style={{color : 'white'}}>Enter your zipcode and how many miles you're willing to travel. \r\n                                We'll output the five pairs of parks with the most contrasting wild life. If nothing comes up, try to increase your distance.</p>\r\n                        </div>\r\n                </Jumbotron>\r\n\r\n                <div className=\"container\">\r\n                \r\n                    <Form onSubmit={this.handleSubmit}>\r\n                        <Row>\r\n                            <Col>\r\n                                <Form.Group>\r\n                                    <Form.Label>Distance from zipcode</Form.Label>\r\n                                    <Form.Control value={this.state.distance} onChange={e => this.setState({distance : e.target.value})} placeholder=\"distance in miles\" />\r\n                                </Form.Group>\r\n                            </Col>\r\n                            <Col>\r\n                                <Form.Group>\r\n                                    <Form.Label>Zipcode (excluding leading zeros)</Form.Label>\r\n                                    <Form.Control value={this.state.zip} onChange={e => this.setState({zip : e.target.value})} placeholder=\"zipcode\" />\r\n                                </Form.Group>\r\n                            </Col>\r\n                            \r\n                        </Row>\r\n                        <Row>\r\n                            <Button style={{backgroundColor:\"green\"}}type=\"submit\" onClick={this.onSubmit}>Submit</Button>\r\n                        </Row>\r\n                    </Form>\r\n                </div>  \r\n                <div className=\"container\">\r\n                    {this.state.parks}                    \r\n                </div>   \r\n            </div>\r\n        )}\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}